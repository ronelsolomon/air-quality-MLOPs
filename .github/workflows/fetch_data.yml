name: Fetch Air Quality Data

on:
  schedule:
    # Runs at 00:00 UTC every day (4:00 PM PST / 5:00 PM PDT)
    - cron: '0 0 * * *'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD). If not provided, fetches from 2020-01-01'
        required: false
        default: '2020-01-01'
      end_date:
        description: 'End date (YYYY-MM-DD). Defaults to yesterday'
        required: false
      chunk_days:
        description: 'Number of days to fetch in each chunk (max 30)'
        required: false
        default: '30'

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    
    env:
      PYTHON_VERSION: '3.11'
      API_TOKEN: "18fed86f6f05b8695480ad90a15a00661e1b28de"
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for git diff to work properly
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas requests python-dotenv
    
    - name: Fetch historical data
      id: fetch
      run: |
        # Set end date (default to yesterday to ensure data is available)
        if [ -z "${{ github.event.inputs.end_date }}" ]; then
          END_DATE=$(date -d "yesterday" +'%Y-%m-%d')
          echo "Using end date: $END_DATE (yesterday)"
        else
          END_DATE="${{ github.event.inputs.end_date }}"
          echo "Using provided end date: $END_DATE"
        fi
        
        # Set start date from input or default to 2020-01-01
        START_DATE="${{ github.event.inputs.start_date }}"
        echo "Using start date: $START_DATE"
        
        # Set chunk size (days per API call)
        CHUNK_DAYS=${{ github.event.inputs.chunk_days }}
        if [ $CHUNK_DAYS -gt 30 ]; then
          echo "Warning: Maximum chunk size is 30 days. Using 30 days."
          CHUNK_DAYS=30
        fi
        
        # Convert dates to timestamps for calculation
        END_TS=$(date -d "$END_DATE" +%s)
        CURRENT_TS=$(date -d "$START_DATE" +%s)
        
        # Process in chunks
        while [ $CURRENT_TS -le $END_TS ]; do
          # Calculate chunk end date
          CHUNK_END_TS=$((CURRENT_TS + (CHUNK_DAYS - 1) * 86400))
          
          # Don't go beyond the end date
          if [ $CHUNK_END_TS -gt $END_TS ]; then
            CHUNK_END_TS=$END_TS
          fi
          
          # Convert back to YYYY-MM-DD format
          CHUNK_START=$(date -d "@$CURRENT_TS" +'%Y-%m-%d')
          CHUNK_END=$(date -d "@$CHUNK_END_TS" +'%Y-%m-%d')
          
          echo "Processing chunk: $CHUNK_START to $CHUNK_END"
          
          # Run the fetch script for this chunk
          python fetch_data_github.py \
            --start-date "$CHUNK_START" \
            --end-date "$CHUNK_END" \
            --output training_data.csv \
            --api-token "${{ env.API_TOKEN }}" \
            --city "Milpitas"
          
          # Move to next chunk
          CURRENT_TS=$((CHUNK_END_TS + 86400))
          
          # Add a small delay between chunks
          sleep 5
        done
        
        echo "START_DATE=$START_DATE" >> $GITHUB_ENV
        echo "END_DATE=$END_DATE" >> $GITHUB_ENV
    
    - name: Check for data changes
      id: git-check
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Check if there are any changes
        if git diff --quiet training_data.csv; then
          echo "changes_detected=false" >> $GITHUB_OUTPUT
        else
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          
          # Commit and push changes
          git add training_data.csv
          git commit -m "[Automated] Update air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
          git push
        fi
    
    - name: Output date range info
      run: |
        echo "Data fetch completed for range: ${{ env.START_DATE }} to ${{ env.END_DATE }}"
        echo "Changes detected: ${{ steps.git-check.outputs.changes_detected || 'false' }}"
    
    - name: Trigger model retraining (optional)
      if: steps.git-check.outputs.changes_detected == 'true' && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'train_model.yml',
            ref: 'main'
          })
    
    - name: Create PR if needed (optional)
      if: steps.git-check.outputs.changes_detected == 'true' && github.event_name == 'schedule'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "[Automated] Update air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
        title: "[Data Update] New air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
        body: "Automated update of air quality data"
        branch: data/update-${{ github.run_id }}

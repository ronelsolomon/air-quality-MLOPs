name: Fetch Air Quality Data

on:
  schedule:
    # Runs at 00:00 UTC every day (4:00 PM PST / 5:00 PM PDT)
    - cron: '0 0 * * *'
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD). If not provided, uses end_date - days_back'
        required: false
      end_date:
        description: 'End date (YYYY-MM-DD). Defaults to today'
        required: false
      days_back:
        description: 'Number of days of historical data to fetch (used if start_date not provided)'
        required: false
        default: '1'

jobs:
  fetch-data:
    runs-on: ubuntu-latest
    
    env:
      PYTHON_VERSION: '3.11'
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Required for git diff to work properly
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pandas requests python-dotenv
    
    - name: Fetch historical data
      id: fetch
      env:
        # Add your API token as a GitHub secret and reference it here
        # API_TOKEN: ${{ secrets.AIR_QUALITY_API_TOKEN }}
      run: |
        # Set end date (default to yesterday to ensure data is available)
        if [ -z "${{ github.event.inputs.end_date }}" ]; then
          END_DATE=$(date -d "yesterday" +'%Y-%m-%d')
          echo "Using end date: $END_DATE (yesterday)"
        else
          END_DATE="${{ github.event.inputs.end_date }}"
          echo "Using provided end date: $END_DATE"
        fi
        
        # Set start date based on input or calculate from days_back
        if [ -n "${{ github.event.inputs.start_date }}" ]; then
          START_DATE="${{ github.event.inputs.start_date }}"
          echo "Using provided start date: $START_DATE"
        else
          DAYS_BACK=${{
            github.event.inputs.days_back || '1'
          }}
          # Calculate start date as (end_date - days_back + 1) to be inclusive
          START_DATE=$(date -d "$END_DATE - $((DAYS_BACK - 1)) days" +'%Y-%m-%d')
          echo "Calculated start date: $START_DATE"
        fi
        
        # Validate dates
        if [[ "$START_DATE" > "$END_DATE" ]]; then
          echo "Error: Start date ($START_DATE) is after end date ($END_DATE)"
          exit 1
        fi
        
        echo "Fetching data from $START_DATE to $END_DATE"
        
        # Run the lightweight fetch script
        python fetch_data_github.py \
          --start-date "$START_DATE" \
          --end-date "$END_DATE" \
          --output training_data.csv \
          --api-token "$API_TOKEN"
        
        # Output the date range for use in subsequent steps
        echo "START_DATE=$START_DATE" >> $GITHUB_ENV
        echo "END_DATE=$END_DATE" >> $GITHUB_ENV
    
    - name: Check for data changes
      id: git-check
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Check if there are any changes
        if git diff --exit-code training_data.csv; then
          echo "No changes detected in the data"
        else
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "Changes detected in the data"
        fi
        
    - name: Commit and push changes
      if: steps.git-check.outputs.changes_detected == 'true'
      run: |
        git add training_data.csv
        git commit -m "[Automated] Update air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
        git push
    
    - name: Output date range info
      run: |
        echo "Data fetch completed for range: ${{ env.START_DATE }} to ${{ env.END_DATE }}"
        echo "Changes detected: ${{ steps.git-check.outputs.changes_detected || 'false' }}"
    
    - name: Trigger model retraining (optional)
      if: steps.git-check.outputs.changes_detected == 'true' && github.event_name == 'schedule'
      uses: actions/github-script@v6
      with:
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'train_model.yml',
            ref: 'main'
          })
    
    - name: Create PR if needed (optional)
      if: steps.git-check.outputs.changes_detected == 'true' && github.event_name == 'schedule'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "[Automated] Update air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
        title: "[Data Update] New air quality data (${{ env.START_DATE }} to ${{ env.END_DATE }})"
        body: "Automated update of air quality data"
        branch: "data/update-$(date +%s)"

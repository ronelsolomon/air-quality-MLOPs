name: Train Air Quality Model

on:
  workflow_dispatch:
    inputs:
      test_size:
        description: 'Test set size (0.0-1.0)'
        required: false
        default: '0.2'
      n_estimators:
        description: 'Number of trees in the random forest'
        required: false
        default: '100'

jobs:
  train-model:
    runs-on: ubuntu-latest
    env:
      PYTHON_VERSION: '3.11'
      MLFLOW_TRACKING_URI: 'http://localhost:5000'  # Update with your MLflow server
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mlflow scikit-learn pandas numpy matplotlib seaborn joblib
    
    - name: Train and evaluate model
      id: train
      env:
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
      run: |
        echo "Starting model training..."
        python train_model.py \
          --test-size ${{ github.event.inputs.test_size || '0.2' }} \
          --n-estimators ${{ github.event.inputs.n_estimators || '100' }}
        
        # Check if model file was created
        if [ -f "models/model.joblib" ]; then
          echo "model_trained=true" >> $GITHUB_OUTPUT
          echo "Model trained and saved successfully"
        else
          echo "model_trained=false" >> $GITHUB_OUTPUT
          echo "Error: Model training failed"
          exit 1
        fi
    
    - name: Upload model artifact
      if: steps.train.outputs.model_trained == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: air-quality-model
        path: |
          models/model.joblib
          models/feature_importance.png
          reports/figures/*.png
    
    - name: Create Model Card
      if: steps.train.outputs.model_trained == 'true'
      run: |
        mkdir -p model_card
        echo "# Air Quality Prediction Model" > model_card/README.md
        echo "" >> model_card/README.md
        echo "## Model Details" >> model_card/README.md
        echo "- **Trained on**: $(date -u +'%Y-%m-%d %H:%M:%S UTC') " >> model_card/README.md
        echo "- **Model Type**: Random Forest Regressor" >> model_card/README.md
        echo "- **Features**: AQI, weather conditions, and time-based features" >> model_card/README.md
        echo "- **Target**: Next hour AQI prediction" >> model_card/README.md
        echo "" >> model_card/README.md
        echo "## Performance Metrics" >> model_card/README.md
        echo "Metrics will be updated after training" >> model_card/README.md
        
        # Add model card to artifacts
        cp model_card/README.md models/
    
    - name: Commit model updates
      if: steps.train.outputs.model_trained == 'true'
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Add and commit model files
        git add models/ reports/figures/
        
        # Only commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "[Automated] Update model and evaluation metrics"
          git push
          echo "Model updates committed to repository"
        else
          echo "No model updates to commit"
        fi
    
    - name: Update Model Registry
      if: steps.train.outputs.model_trained == 'true'
      env:
        MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
      run: |
        echo "Updating MLflow model registry..."
        # This assumes you have a script to handle model registration
        python -c "
        import mlflow
        from model_registry import log_model, transition_model_stage
        
        # Log the model to MLflow
        run_id = log_model(
            model_path='models/model.joblib',
            model_name='air-quality-prediction',
            metrics_path='reports/metrics.json',
            params_path='reports/params.json'
        )
        
        # Transition the model stage if it meets criteria
        if run_id:
            transition_model_stage(
                model_name='air-quality-prediction',
                version='latest',
                stage='Production',
                metrics_threshold={'r2_score': 0.7}
            )
        "
